@using BulkyWeb
@using Bulky.Models
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers


@* When we create sepreate project for  models, database ,utilities etc.. we need to import them into the current project after adding *@
@* reference of those projects into current project ,Here for  views we can add all "using" statement at once  *@
@* then all views gets imported into from here you dont need to add them seperately in views files *@


@*How to add project reference-> click on right click on project -> click on add -> click on project refernce *@

@* When you were in a thought that you want to restart the migration from begining ,then you have to delete the db in ssms *@
@* and delete migration file   and now add and update database  ,if its failing please check the default project in console *@


@* Dependency injection Services,Lifetimes *@
@* https://www.youtube.com/watch?v=AopeJjkcRvU&t=14276s watch  4hr:50min - 4hr:58min if have any doubts regarding di *@
@* Transient-> every time sevice is Request a new implementation is created. *@
@* A Transient service is created every time it is requested. It does not maintain state between requests. *@

@* Even within the same HTTP request, if injected multiple times, it creates different instances *@

@* [Scope most Recommened for  web Application] *@
@* Scoped->A new instance is created for each new HTTP request. *@

@* Scoped services are created once per request (HTTP request in web apps) and shared within that request. *@

@* When http Request is sent to the server that time for that scope one life time is created. *@
@* and then same object or same service is used where ever in that request, service is requested. *@


@* Singleton ->A Singleton service is created only once for the entire application lifetime and shared across all requests. *@
@* The same instance of SingletonService is used for the entire application lifetime. *@

@* Even if multiple HTTP requests come in, they all use the same instance. *@

@* Use Singleton for services that must maintain global state, like caching or configuration! *@



@* When we use base(db) then first inherited one is the  related to base (db) *@
@* Ex:  public class CatorgyRepository : Repository<category> (first), ICategoryRepository *@

